{"version":3,"sources":["components/counter.js","components/counters.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Counter","styles","fontSize","fontWeight","prevProps","prevState","console","log","counter","value","this","props","_this2","react_default","a","createElement","className","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","classes","Component","Counters","_this$props","onReset","counters","map","components_counter","key","NavBar","_ref","totalCounters","href","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleReset","c","setState","handleIncrement","toConsumableArray","index","indexOf","objectSpread","handleDelete","filter","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62cc11c5.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nclass Counter extends Component{\r\n    componentDidUpdate(prevProps,prevState){\r\n        console.log(\"prevProps\",prevProps)\r\n        console.log(\"prevState\",prevState)\r\n        if(prevProps.counter.value !== this.props.counter.value)\r\n        {\r\n            console.log(\"call ajax\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        console.log(\"Counter - Unmount\")\r\n    }\r\n\r\n    styles= {\r\n        fontSize : 50,\r\n        fontWeight:\"bold\"\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        console.log(\"Counter - Rendered\")\r\n        return (\r\n        <div>\r\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n            <button onClick={() =>{this.props.onIncrement(this.props.counter)}} className=\"btn btn-secondary btn-sm\">Increment</button>\r\n            <button onClick={() =>{this.props.onDelete(this.props.counter.id)} } className=\"btn btn-danger btn-sm m-2\">Delete</button>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    formatCount(){\r\n        return this.props.counter.value === 0 ? \"Zero\" : this.props.counter.value; \r\n    }\r\n\r\n    getBadgeClasses(){\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\"\r\n        return classes;\r\n    }\r\n}\r\nexport default Counter;","import React, { Component } from 'react'\r\nimport Counter from './counter'\r\nclass Counters extends Component {\r\n    \r\n\r\n    render() {\r\n        const {onReset , counters,onDelete,onIncrement} =this.props; \r\n\r\n        console.log(\"Counters - Rendered\")\r\n        return (\r\n        <div>\r\n            <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\" >Reset</button>\r\n            {counters.map( counter => \r\n                <Counter \r\n                    key={counter.id} \r\n                    counter = {counter}\r\n                    onDelete={onDelete}\r\n                    onIncrement={onIncrement}\r\n                />\r\n            )}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counters\r\n","import React, { Component } from 'react'\r\n\r\nconst NavBar = ({totalCounters}) => {\r\n    console.log(\"NavBar - Rendered\")\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                Navbar{\" \"}\r\n                <span className=\"badge badge-pill badge-secondary\">{totalCounters}</span>\r\n            </a>\r\n\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\nexport default NavBar;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Counters from './components/counters';\nimport NavBar from './components/navbar';\n\nclass App extends Component {\n  state={\n    counters : [\n        {id:1,value : 4},\n        {id:2,value : 0},\n        {id:3,value : 0},\n        {id:4,value : 0}\n    ]\n}\n\nconstructor(){\n  super();\n  console.log(\"App - Constructor\" , this.props)\n  //this.state = this.props.\n}\n\ncomponentDidMount(){\n  console.log(\"App - Mounted\")\n}\n\nhandleReset = () =>{\n    const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n    })\n    this.setState({counters})\n}\n\nhandleIncrement = (counter) =>{\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n\n    this.setState({counters})\n}\n\nhandleDelete = (index) =>{\n    const counters = this.state.counters.filter(c => c.id !== index)\n    this.setState({counters})\n}\n\n  render(){\n    console.log(\"App - Rendered\")\n    return (\n    <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c=> c.value > 0).length}/>\n      <main className=\"contianer\">\n        <Counters \n        onReset={this.handleReset}\n        onIncrement={this.handleIncrement}\n        onDelete={this.handleDelete}\n        counters={this.state.counters}\n        />\n      </main>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}